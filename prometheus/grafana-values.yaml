adminPassword: "s1cret0"
# grafana configuration
grafana.ini:
  server:
    domain: monitoring.local.test
    root_url: "%(protocol)s://%(domain)s:%(http_port)s/grafana/"
    # When serve_from_subpath is enabled, internal requests from e.g. prometheus get redirected to the defined root_url.
    # This is causing prometheus to not be able to scrape metrics because it accesses grafana via the kubernetes service name and is then redirected to the public url
    # To make Prometheus work, disable server_from_sub_path and add rewrite rule in NGINX proxy
    # ref: https://github.com/grafana/grafana/issues/72577#issuecomment-1682277779
    serve_from_sub_path: false
##
## Provisioning sidecars
##
sidecar:
  dashboards:
    # Enable dashboard sidecar
    enabled: true
    # Enable discovery in all namespaces
    searchNamespace: ALL
    # Search for ConfigMaps containing `grafana_dashboard` label
    label: grafana_dashboard
    # Annotation containing the folder where sidecar will place the dashboard.
    folderAnnotation: grafana_folder
    provider:
      # disableDelete to activate a import-only behaviour
      disableDelete: true
      # allow Grafana to replicate dashboard structure from filesystem
      foldersFromFilesStructure: true
  datasources:
    # Enable datasource sidecar
    enabled: true
    # Enable discovery in all namespaces
    searchNamespace: ALL
    # Search for ConfigMaps containing `grafana_datasource` label
    label: grafana_datasource
    labelValue: "1"

## Provisioning Dashboards
# Dashboard Providers
dashboardProviders:
  dashboardproviders.yaml:
    apiVersion: 1
    providers:
      - name: default
        orgId: 1
        folder: ""
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/default-folder
      - name: infrastructure
        orgId: 1
        folder: "Infrastructure"
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/infrastructure-folder
      - name: kubernetes
        orgId: 1
        folder: Kubernetes
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/kubernetes-folder
# Dashboards
dashboards:
  kubernetes:
    kubernetes-api-server:
      # renovate: depName="Kubernetes / System / API Server"
      gnetId: 15761
      revision: 19
      datasource: Prometheus
    kubernetes-coredns:
      # renovate: depName="Kubernetes / System / CoreDNS"
      gnetId: 15762
      revision: 20
      datasource: Prometheus
    kubernetes-global:
      # renovate: depName="Kubernetes / Views / Global"
      gnetId: 15757
      revision: 43
      datasource: Prometheus
    kubernetes-namespaces:
      # renovate: depName="Kubernetes / Views / Namespaces"
      gnetId: 15758
      revision: 42
      datasource: Prometheus
    kubernetes-nodes:
      # renovate: depName="Kubernetes / Views / Nodes"
      gnetId: 15759
      revision: 35
      datasource: Prometheus
    kubernetes-pods:
      # renovate: depName="Kubernetes / Views / Pods"
      gnetId: 15760
      revision: 36
      datasource: Prometheus
    kubernetes-volumes:
      # renovate: depName="K8s / Storage / Volumes / Cluster"
      gnetId: 11454
      revision: 14
      datasource: Prometheus    
# Grafana Ingress configuration
ingress:
  enabled: true
  ingressClassName: nginx
  # Values can be templated
  annotations:
    # Enable cert-manager to create automatically the SSL certificate and store in Secret
    cert-manager.io/cluster-issuer: ca-issuer
    cert-manager.io/common-name: monitoring.local.test
    # Nginx rewrite rule
    nginx.ingress.kubernetes.io/rewrite-target: /$1
  path: /grafana/?(.*)
  pathType: ImplementationSpecific
  hosts:
    - monitoring.local.test
  tls:
    - hosts:
      - monitoring.local.test
      secretName: monitoring-tls

# Data sources
datasources:
  datasources.yaml:
    apiVersion: 1
    deleteDatasources:
      - { name: Alertmanager, orgId: 1 }
      - { name: Loki, orgId: 1 }
      - { name: Prometheus, orgId: 1 }
      - { name: Tempo, orgId: 1 }
    datasources:
    - name: Prometheus
      type: prometheus
      uid: prometheus
      access: proxy
      url: http://kube-prometheus-stack-prometheus.kube-prom-stack.svc.cluster.local:9090/prometheus
      isDefault: true
    - name: Alertmanager
      type: alertmanager
      uid: alertmanager
      url: http://kube-prometheus-stack-alertmanager.kube-prom-stack.svc.cluster.local:9093/alertmanager
      jsonData:
        implementation: prometheus
    - name: Loki
      type: loki
      uid: loki
      access: proxy
      url: http://loki-read-headless.loki.svc.cluster.local:3100
      jsonData:
        derivedFields:
            # Traefik traces integration
            # - datasourceUid: tempo
            #   matcherRegex: '"request_X-B3-Traceid":"(\w+)"'
            #   name: TraceID
            #   url: $${__value.raw}
            # NGINX traces integration
          - datasourceUid: tempo
            matcherRegex: '"trace_id": "(\w+)"'
            name: TraceID
            url: $${__value.raw}
    - name: Tempo
      uid: tempo
      type: tempo
      access: proxy
      url: http://tempo-query-frontend-discovery.tempo.svc.cluster.local:3100
