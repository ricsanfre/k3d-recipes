global:
  storageClass: local-path

# Run in production mode behind NGINX proxy terminating TLS sessions
# ref: https://www.keycloak.org/server/reverseproxy
# edge proxy mode: Enables communication through HTTP between the proxy and Keycloak.
# This mode is suitable for deployments with a highly secure internal network where the reverse proxy keeps a secure connection (HTTP over TLS) with clients while communicating with Keycloak using HTTP.
production: true
proxy: edge

# Admin user
auth:
  adminUser: admin

# External DB: https://github.com/bitnami/charts/tree/main/bitnami/keycloak#use-an-external-database
postgresql:
  enabled: false

externalDatabase:
  host: "keycloak-db-rw"
  port: 5432
  database: keycloak
  existingSecret: "keycloak-db-secret"
#  existingSecretHostKey: "host"
#  existingSecretPortKey: "port"
  existingSecretUserKey: "username"
#  existingSecretDatabaseKey: "dbname"
  existingSecretPasswordKey: "password"


# Importing realm on start-up
# https://www.keycloak.org/server/importExport#_importing_a_realm_during_startup
extraStartupArgs: "--import-realm"

extraVolumes:
  - name: realm-config
    configMap:
      name: keycloak-realm-configmap
extraVolumeMounts:
  - mountPath: /opt/bitnami/keycloak/data/import
    name: realm-config

containerSecurityContext:
  readOnlyRootFilesystem: false


# Ingress config
ingress:
  enabled: true
  ingressClassName: "nginx"
  pathType: Prefix
  annotations:
    cert-manager.io/cluster-issuer: ca-issuer
    # Increasing proxy buffer size to avoid
    # https://stackoverflow.com/questions/57503590/upstream-sent-too-big-header-while-reading-response-header-from-upstream-in-keyc
    nginx.ingress.kubernetes.io/proxy-buffers-number: "4"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
  hostname: keycloak.mycluster.local
  tls: true
